---
title: "05_analysis.qmd"
format:
  html:
    embed-resources: true
editor: visual
---

## Analyse data

```{r}
data <- read_tsv(str_c(data_dir, '03_dat_aug.tsv.gz'), col_types = cols(
  Pregnancies = col_integer(),
  Glucose = col_integer(),
  BP = col_integer(),
  Skin_thick = col_integer(),
  Insulin = col_integer(),
  BMI = col_number(),
  DPF = col_number(),
  Age_onset = col_integer(),
  Outcome = col_factor()
  ))

#Analyzing the correlation between Obesity and diabetes

data |>
   select(BMI_class, Outcome)
```

### Boxplots

```{r}
Boxplots <- function(attribute) {
    Boxplot <- ggplot(data, aes(x = 1, y = data[[attribute]])) +
               geom_boxplot() +
               theme_minimal() +
               labs(x = NULL, y = attribute)
    return(Boxplot)
}

Pregnancies <- Boxplots("Pregnancies") +
    labs(title = paste("Boxplots of all the attributes"))

Glucose <- Boxplots("Glucose")

BP <- Boxplots("BP")+
    labs(y = "Blood Pressure")

Skin_thick <- Boxplots("Skin_thick") +
    labs(y = "Skin Thickness")

Insulin <- Boxplots("Insulin")

BMI <- Boxplots("BMI")+
    labs(y = "Body Mass Index")

DPF <- Boxplots("DPF") +
    labs(y = "Diabetes Ped. Func.")

Age_onset <- Boxplots("Age_onset") +
    labs(y = "Age Onset")

combination_plot <- (Pregnancies + Glucose + BP + Skin_thick + Insulin + BMI + DPF + Age_onset) +
    plot_layout(guides = 'collect', ncol = 4)

combination_plot
```

### Add "age_ranges" column with the age of onset values in ranges in intervals of 10

```{r}
age_ranges <- c(18, 29, 39, 49, 59, 69, 79, 89, 99)

age_range_labels <- c("18-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-89", "90-100")

data <- data |> 
    mutate(Age_range = cut(Age_onset, breaks = age_ranges, labels=age_range_labels))

head(data)
```

### Age ranges density plot.

```{r}
density_age <- ggplot(data, aes(y = Age_range)) +
    geom_bar() +
    theme_minimal() +
    coord_flip()

density_age
```

### Correlation Heatmap

```{r}
data_clean_from_nas <- data |>
    drop_na() |>
    select(where(is.numeric))

correlation_matrix <- cor(data_clean_from_nas)

corrplot(correlation_matrix, method = "color", type = "full", order = "hclust", 
         tl.col = "black", 
         col = colorRampPalette(c("#ffffff", "#ef5675", "#7a5195"))(200),
         addCoef.col = "black", number.cex = 0.7,
         title = "Correlation Heatmap",
         mar = c(0,0,2,0), # Adjusting margins
         tl.pos = "lt", # Changing text labels position to left-top
         tl.offset = 0.5 # Adjusting text label position
)
```

### Linear Regression: Skin Thickness vs Blood Pressure

```{r}
model <- lm(`Skin_thick` ~ BP, data = data)

ggplot(data, aes(x = BP, y = Skin_thick)) +
  geom_point(color = "steelblue", alpha = 0.7, size = 3) +  
  geom_smooth(method = "lm", se = FALSE, color = "red", linewidth = 1.5) + 
  labs(x = "Blood Pressure", y = "Skin Thickness", 
       title = "Linear Regression: Skin Thickness vs Blood Pressure",
       subtitle = "Relationship between Skin Thickness and Blood Pressure") +
  theme_minimal() +  
  theme(plot.title = element_text(size = 14, face = "bold"),
        plot.subtitle = element_text(size = 10, color = "black")) +
  guides(color = guide_legend(title = NULL)) 
```

## Principal component analysis

```{r}
pca_data <- data |>
    drop_na()

pca_model <- pca_data |>
    select(where(is.numeric)) |>
    prcomp(scale. = TRUE)

pca_model |>
    augment(pca_data) |>
    ggplot(aes(.fittedPC1, .fittedPC2, color = Outcome)) +
        geom_point(size = 1.8, alpha = 0.6) +
        theme_minimal() +
        scale_colour_manual(values = c("#F44336", "#03A9F4")) +
        labs(x = "PCA component 1", y = "PCA component 2",
             title = "Principal component analysis") + 
        theme(plot.title = element_text(hjust = 0.5))

```

### Variance explained

Goal: predict diabetic or non-diabetic. PCA : with the outcome variable.

```{r}
pca_model |>
    tidy(matrix = "eigenvalues") |>
    ggplot(aes(PC, percent)) +
        geom_col(width = 0.6, fill = "#03A9F4") +
        scale_x_continuous(breaks = 1:8) +
        scale_y_continuous(labels = scales::percent_format()) +
        theme_minimal() +
        labs(x = "Principal components", y = "Variance explained",
             title = "Variance explained by each principal component") + 
        theme(plot.title = element_text(hjust = 0.5))
```

### BMI class distribution

```{r}

```
